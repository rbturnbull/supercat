params: {}
output: |-
  ResidualUNet(
    (body): ResNetBody(
      (stem): Sequential(
        (0): Conv3d(1, 64, kernel_size=(7, 7, 7), stride=(2, 2, 2), padding=(3, 3, 3))
        (1): ReLU()
        (2): ReLU(inplace=True)
      )
      (downblocks): Sequential(
        (0): DownBlock(
          (block1): ResBlock(
            (conv1): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (shortcut): Sequential(
              (0): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(2, 2, 2))
              (1): ReLU()
            )
            (conv2): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
          (block2): ResBlock(
            (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (shortcut): Sequential()
            (conv2): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
        )
        (1): DownBlock(
          (block1): ResBlock(
            (conv1): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (shortcut): Sequential(
              (0): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(2, 2, 2))
              (1): ReLU()
            )
            (conv2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
          (block2): ResBlock(
            (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (shortcut): Sequential()
            (conv2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
        )
        (2): DownBlock(
          (block1): ResBlock(
            (conv1): Conv3d(256, 512, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (shortcut): Sequential(
              (0): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(2, 2, 2))
              (1): ReLU()
            )
            (conv2): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
          (block2): ResBlock(
            (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (shortcut): Sequential()
            (conv2): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
        )
        (3): DownBlock(
          (block1): ResBlock(
            (conv1): Conv3d(512, 1024, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (shortcut): Sequential(
              (0): Conv3d(512, 1024, kernel_size=(1, 1, 1), stride=(2, 2, 2))
              (1): ReLU()
            )
            (conv2): Conv3d(1024, 1024, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
          (block2): ResBlock(
            (conv1): Conv3d(1024, 1024, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (shortcut): Sequential()
            (conv2): Conv3d(1024, 1024, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
        )
      )
    )
    (upblock_layers): ModuleList(
      (0): UpBlock(
        (upsample): ConvTranspose3d(1024, 512, kernel_size=(2, 2, 2), stride=(2, 2, 2))
        (block1): ResBlock(
          (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (shortcut): Sequential()
          (conv2): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (bn1): ReLU()
          (bn2): ReLU()
          (relu): ReLU(inplace=True)
        )
      )
      (1): UpBlock(
        (upsample): ConvTranspose3d(512, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2))
        (block1): ResBlock(
          (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (shortcut): Sequential()
          (conv2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (bn1): ReLU()
          (bn2): ReLU()
          (relu): ReLU(inplace=True)
        )
      )
      (2): UpBlock(
        (upsample): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2))
        (block1): ResBlock(
          (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (shortcut): Sequential()
          (conv2): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (bn1): ReLU()
          (bn2): ReLU()
          (relu): ReLU(inplace=True)
        )
      )
      (3): UpBlock(
        (upsample): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2))
        (block1): ResBlock(
          (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (shortcut): Sequential()
          (conv2): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (bn1): ReLU()
          (bn2): ReLU()
          (relu): ReLU(inplace=True)
        )
      )
    )
    (final_upsample): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2))
    (final_layer): Conv3d(33, 1, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
