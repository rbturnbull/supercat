params: {}
output: |-
  ResidualUNet(
    (body): ResNetBody(
      (stem): Sequential(
        (0): Conv2d(1, 408, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
        (1): ReLU()
        (2): ReLU(inplace=True)
      )
      (downblocks): Sequential(
        (0): DownBlock(
          (block1): ResBlock(
            (conv1): Conv2d(408, 816, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (shortcut): Sequential(
              (0): Conv2d(408, 816, kernel_size=(1, 1), stride=(2, 2))
              (1): ReLU()
            )
            (conv2): Conv2d(816, 816, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
          (block2): ResBlock(
            (conv1): Conv2d(816, 816, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (shortcut): Sequential()
            (conv2): Conv2d(816, 816, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
        )
        (1): DownBlock(
          (block1): ResBlock(
            (conv1): Conv2d(816, 1632, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (shortcut): Sequential(
              (0): Conv2d(816, 1632, kernel_size=(1, 1), stride=(2, 2))
              (1): ReLU()
            )
            (conv2): Conv2d(1632, 1632, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
          (block2): ResBlock(
            (conv1): Conv2d(1632, 1632, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (shortcut): Sequential()
            (conv2): Conv2d(1632, 1632, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
        )
        (2): DownBlock(
          (block1): ResBlock(
            (conv1): Conv2d(1632, 3264, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (shortcut): Sequential(
              (0): Conv2d(1632, 3264, kernel_size=(1, 1), stride=(2, 2))
              (1): ReLU()
            )
            (conv2): Conv2d(3264, 3264, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
          (block2): ResBlock(
            (conv1): Conv2d(3264, 3264, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (shortcut): Sequential()
            (conv2): Conv2d(3264, 3264, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
        )
        (3): DownBlock(
          (block1): ResBlock(
            (conv1): Conv2d(3264, 6528, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (shortcut): Sequential(
              (0): Conv2d(3264, 6528, kernel_size=(1, 1), stride=(2, 2))
              (1): ReLU()
            )
            (conv2): Conv2d(6528, 6528, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
          (block2): ResBlock(
            (conv1): Conv2d(6528, 6528, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (shortcut): Sequential()
            (conv2): Conv2d(6528, 6528, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (bn1): ReLU()
            (bn2): ReLU()
            (relu): ReLU(inplace=True)
          )
        )
      )
    )
    (upblock_layers): ModuleList(
      (0): UpBlock(
        (upsample): ConvTranspose2d(6528, 3264, kernel_size=(2, 2), stride=(2, 2))
        (block1): ResBlock(
          (conv1): Conv2d(3264, 3264, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (shortcut): Sequential()
          (conv2): Conv2d(3264, 3264, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (bn1): ReLU()
          (bn2): ReLU()
          (relu): ReLU(inplace=True)
        )
      )
      (1): UpBlock(
        (upsample): ConvTranspose2d(3264, 1632, kernel_size=(2, 2), stride=(2, 2))
        (block1): ResBlock(
          (conv1): Conv2d(1632, 1632, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (shortcut): Sequential()
          (conv2): Conv2d(1632, 1632, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (bn1): ReLU()
          (bn2): ReLU()
          (relu): ReLU(inplace=True)
        )
      )
      (2): UpBlock(
        (upsample): ConvTranspose2d(1632, 816, kernel_size=(2, 2), stride=(2, 2))
        (block1): ResBlock(
          (conv1): Conv2d(816, 816, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (shortcut): Sequential()
          (conv2): Conv2d(816, 816, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (bn1): ReLU()
          (bn2): ReLU()
          (relu): ReLU(inplace=True)
        )
      )
      (3): UpBlock(
        (upsample): ConvTranspose2d(816, 408, kernel_size=(2, 2), stride=(2, 2))
        (block1): ResBlock(
          (conv1): Conv2d(408, 408, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (shortcut): Sequential()
          (conv2): Conv2d(408, 408, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (bn1): ReLU()
          (bn2): ReLU()
          (relu): ReLU(inplace=True)
        )
      )
    )
    (final_upsample): ConvTranspose2d(408, 204, kernel_size=(2, 2), stride=(2, 2))
    (final_layer): Conv2d(205, 1, kernel_size=(1, 1), stride=(1, 1))
  )
